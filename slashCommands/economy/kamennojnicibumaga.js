const { SlashCommandBuilder } = require("@discordjs/builders");
const cdSet = new Set();

module.exports = {
  name: "kamennojnicibumaga",
  category: 4,
  data: new SlashCommandBuilder()
  .setName("–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
  .setDescription("–°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∏ –Ω–∞ —Ç–æ–∫–µ–Ω—ã.")
  .addUserOption(o => o
    .setName("–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫")
    .setDescription("–£—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞.")
    .setRequired(true)
  )
  .addIntegerOption(o => o
    .setName("—Å—Ç–∞–≤–∫–∞")
    .setDescription("–°—Ç–∞–≤–∫–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã.")
    .setRequired(true)
  )
  ,
  cooldown: 5,
  run: async (client, int, Data) => {
    const { embed, db, config, emoji, Discord, rewards, util, errEmb } = Data;
    if (cdSet.has(int.user.id)) return embed(int).setError("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.").send("reply", true);
    const member = int.options.getMember('–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫');
    if (!member) return embed(int).setError("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.").send();
    if (cdSet.has(member.id)) return embed(int).setError("–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ –∏–≥—Ä–µ.").send("reply", true);
    if (member.id === int.user.id || member.user.bot) return embed(int).setError("–£–∫–∞–∂–∏ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.").send();
    const bet = int.options.getInteger("—Å—Ç–∞–≤–∫–∞");
    if (bet < 5) return embed(int).setError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 5-–∏.").send();

    // checking
    const myData = await db.findOrCreate("profile", int.user.id);
    const memberData = await db.findOrCreate("profile", member.id);
    if ((myData.tokens || 0) < bet) return embed(int).setError("–¢—ã –Ω–µ –∏–º–µ–µ—à—å —Å—Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤.").send();
    if ((memberData.tokens || 0) < bet) return embed(int).setError("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤.").send();
    // end of checking

    const emb1 = embed(int).setAuthor({name: `–í—ã–∑–æ–≤ –æ—Ç ${int.user.username}`})
    .setText(`${member}, —Å —Ç–æ–±–æ–π —Ö–æ—Ç—è—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É **–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞** –Ω–∞ ${emoji.token}\`${util.formatNumber(bet)}\``)
    .setFooter("–ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Ç–∏–≤, —Ç–æ –∏–≥–Ω–æ—Ä—å—Ç–µ.")


    const b0 = new Discord.MessageButton()
    .setLabel("–ü—Ä–∏–Ω—è—Ç—å")
    .setCustomId("check0")
    .setStyle("SUCCESS");

    const row1 = new Discord.MessageActionRow().addComponents([b0])
    cdSet.add(int.user.id);
    const msgFirst = await int.reply({embeds: [emb1], components: [row1], fetchReply: true});

    const c1 = msgFirst.createMessageComponentCollector({
      filter: (i) => {
        if (i.customId !== b0.customId) return false;
        if (i.user.id === member.id) return true;
        return i.reply({embeds: [errEmb], ephemeral: true});
      },
      time: 20000
    });

    c1.on("end", (collected) => {
      if (!collected || collected.size === 0) cdSet.delete(int.user.id);
      int.deleteReply();
    });

    c1.on("collect", async () => {
      c1.stop();
      cdSet.add(member.id);

      await Promise.all([
        db.tokens(int.user.id, -bet),
        db.tokens(member.id, -bet),
      ])

      const maindata = {
        [`${int.user.id}`]: {
          id: int.user.id,
          choice: undefined
        },
        [`${member.id}`]: {
          id: member.id,
          choice: undefined
        }
      }

      let boolean = false;
      const emb2 = embed(int).setTitle("–í—ã–±–µ—Ä–∏—Ç–µ...").setText(client.indents`
      **${int.user.username}** ‚Äî ${maindata[int.user.id].choice ? emoji.check : emoji.cross}

      **${member.user.username}** ‚Äî ${maindata[member.id].choice ? emoji.check : emoji.cross}

      ‚úÇ - –ù–æ–∂–Ω–∏—Ü—ã
      üìú - –ë—É–º–∞–≥–∞
      ${emoji.stone} - –ö–∞–º–µ–Ω—å
      `)

      const b1 = new Discord.MessageButton()
      .setEmoji("‚úÇ")
      .setCustomId("nojnici")
      .setStyle("PRIMARY");

      const b2 = new Discord.MessageButton()
      .setEmoji("üìú")
      .setCustomId("bumaga")
      .setStyle("PRIMARY");

      const b3 = new Discord.MessageButton()
      .setEmoji(emoji.stone)
      .setCustomId("stone")
      .setStyle("PRIMARY");

      const row2 = new Discord.MessageActionRow().addComponents([b1, b2, b3])

      const emojiById = {
        "nojnici": "‚úÇ",
        "bumaga": "üìú",
        "stone": emoji.stone
      };

      const msg = await int.channel.send({embeds: [emb2], components: [row2]})

      const c2 = msg.createMessageComponentCollector({
        filter: (i) => {
          if (!([b1, b2, b3].map(b => b.customId).includes(i.customId))) return false;
          if (i.user.id === member.id || i.user.id === int.user.id) return true;
          return i.reply({embeds: [errEmb], ephemeral: true});
        },
        time: 30000
      });

      c2.on("end", () => {
        if (!boolean) msg.delete();
        cdSet.delete(int.user.id);
        cdSet.delete(member.id);
      });

      c2.on("collect", async i => {
        await i.deferUpdate();

        const myData = await db.findOrCreate("profile", int.user.id);
        const memberData = await db.findOrCreate("profile", member.id);
        if ((myData.tokens || 0) + bet < bet) return embed(i).setTitle("–û—à–∏–±–∫–∞").setError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.").send("followUp", true);
        if ((memberData.tokens || 0) + bet < bet) return embed(i).setTitle("–û—à–∏–±–∫–∞").setError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.").send("followUp", true);

        maindata[i.user.id].choice = i.customId;

        const embedToChangeLast = embed(int).setTitle("–í—ã–±–µ—Ä–∏—Ç–µ...").setText(client.indents`
        **${int.user.username}** ‚Äî ${maindata[int.user.id].choice ? emoji.check : emoji.cross}

        **${member.user.username}** ‚Äî ${maindata[member.id].choice ? emoji.check : emoji.cross}

        ‚úÇ - –ù–æ–∂–Ω–∏—Ü—ã
        üìú - –ë—É–º–∞–≥–∞
        ${emoji.stone} - –ö–∞–º–µ–Ω—å
        `)

        await msg.edit({embeds: [embedToChangeLast]});
        i.followUp({content: "–¢—ã –≤—ã–±—Ä–∞–ª " + emojiById[i.customId], ephemeral: true});
        if (config.DEVELOPER.some(option => [member.id, int.user.id].includes(option))) {
          if (!config.DEVELOPER.includes(i.user.id)) i.followUp({content: `${i.user.username} –≤—ã–±—Ä–∞–ª ${emojiById[i.customId]}`, ephemeral: true})
        }
      });

      while ((!maindata[member.id].choice || !maindata[int.user.id].choice) && !c2.ended) {
        await util.delay(1000);
      }

      if (c2.ended) return;

      c2.stop();


      const u1 = maindata[`${int.user.id}`];
      const u2 = maindata[`${member.id}`];

      if (u1.choice == u2.choice) {
        await Promise.all([
          db.tokens(int.user.id, bet),
          db.tokens(member.id, bet),
        ]);

        return client.dann.embed(msg).setColor(emb1.color).setAuthor("–ù–∏—á—å—è")
        .setDescription(client.indents`
          **${int.user.username}** - ${emojiById[u1.choice]}

          **${member.user.username}** - ${emojiById[u2.choice]}
          `).send()
      }

      const lastEmbed = client.dann.embed(msg).setColor(emb1.color)
      .setDescription(client.indents`
        **${int.user.username}** - ${emojiById[u1.choice]}

        **${member.user.username}** - ${emojiById[u2.choice]}
        `);

      let winner = undefined;

      if (u1.choice === "nojnici" && u2.choice === "bumaga") {
        winner = u1;
      } else if (u2.choice === "nojnici" && u1.choice === "bumaga") {
        winner = u2
      } else if (u1.choice === "nojnici" && u2.choice === "stone") {
        winner = u2;
      } else if (u1.choice === "stone" && u2.choice === "nojnici") {
        winner = u1;
      } else if (u1.choice === "stone" && u2.choice === "bumaga") {
        winner = u2;
      } else if (u1.choice === "bumaga" && u2.choice === "stone") {
        winner = u1;
      };

      await db.tokens(winner.id, bet * 2)

      lastEmbed.setAuthor(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî ${winner === u1 ? int.user.username : member.user.username}`).addField("–í—ã–∏–≥—Ä—ã—à:", `${emoji.token}\`${util.formatNumber(bet * 2)}\``).send();

    })



  }
}
